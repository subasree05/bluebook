#
resource "http_variable" "content_type" {
    source = "header"
    property = "Content-Type"
    variable = "content_type"
}

resource "system_variable" "current_time" {
    source = "time"
    variable = "current_time"
}

#
# Response body test
#

resource "http_assertion_status_code" "equals_200" {
    equals = "200"
}

resource "http_assertion_body" "json-response-body-equals" {
    equals = <<<EOF
{"data":["string", 555, 123.54, false]}
EOF
}

resource "http_step" "get-json-response" {
    method = "GET"
    url = "http://localhost:12345/json-response"

    assertions = [
        "${http_assertion_status_code.equals_200.id}",
        "${http_assertion_body.json-response-body-equals.id}",
    ]

    variables = [
        "${http_variable.content_type.id}",
    ]
}

resource "http_test" "test-http-body-match" {
    steps = [
        "${http_step.get-json-response.id}",
    ]
}

#
# Status code test
#

resource "http_assertion_status_code" "equals_404" {
    equals = "404"
}

resource "http_assertion_status_code" "equals_404_multiline" {
    equals = <<<EOF
404
EOF
}

resource "http_step" "get-404-page" {
    method = "GET"
    url = "http://localhost:12345/404"

    assertions = [
        "${http_assertion_status_code.equals_404.id}",
        "${http_assertion_status_code.equals_404_multiline.id}",
    ]
}

resource "http_test" "status-code-404" {
    steps = [
        "${http_step.get-404-page.id}",
    ]
}

#
# Request body test
#

resource "http_assertion_body" "post-body-equals" {
    equals = <<<EOF
this is
some body
EOF
}

resource "http_step" "post-body" {
    method = "POST"
    url = "http://localhost:12345/echo-body"
    body = <<<EOF
this is
some body
EOF

    assertions = [
        "${http_assertion_body.post-body-equals.id}",
    ]
}

resource "http_step" "put-body" {
    method = "PUT"
    url = "http://localhost:12345/echo-body"
    body = <<<EOF
this is
some body
EOF

    assertions = [
        "${http_assertion_body.post-body-equals.id}",
    ]
}

resource "http_step" "patch-body" {
    method = "PATCH"
    url = "http://localhost:12345/echo-body"
    body = <<<EOF
this is
some body
EOF

    assertions = [
        "${http_assertion_body.post-body-equals.id}",
    ]
}

resource "http_step" "delete-body" {
    method = "DELETE"
    url = "http://localhost:12345/echo-body"
    body = <<<EOF
this is
some body
EOF

    assertions = [
        "${http_assertion_body.post-body-equals.id}",
    ]
}

resource "http_step" "custom-verb-body" {
    method = "CUSTOM_VERB"
    url = "http://localhost:12345/echo-body"
    body = <<<EOF
this is
some body
EOF

    assertions = [
        "${http_assertion_body.post-body-equals.id}",
    ]
}

resource "http_test" "post-body-echo" {
    steps = [
        "${http_step.post-body.id}",
        "${http_step.put-body.id}",
        "${http_step.patch-body.id}",
        "${http_step.delete-body.id}",
        "${http_step.custom-verb-body.id}",
    ]
}

#
# Request headers
#

resource "http_assertion_body" "header-echo" {
    equals = <<<EOF
Accept-Encoding: gzip
My-Header: header value 1
User-Agent: Go-http-client/1.1
X-Header2: value2

EOF
}

resource "http_step" "auth-header-request" {
    method = "GET"
    url = "http://localhost:12345/echo-headers"

    headers = [
        "my-header", "header value 1",
        "x-header2", "${var.current_time}",
    ]

    variables = [
        "${system_variable.current_time.id}"
    ]

    assertions = [
        "${http_assertion_body.header-echo.id}",
    ]
}

resource "http_test" "header-test" {
    steps = [
        "${http_step.auth-header-request.id}",
    ]
}

#
# Multi step with json field capture and variable interpolation
#
resource "http_variable" "field_id" {
    source = "json"
    property = "data[1]"
    variable = "field_id"
    numeric_type = "int"
}

resource "http_step" "multistep1" {
    method = "GET"
    url = "http://localhost:12345/json-response"

    assertions = [
        "${http_assertion_status_code.equals_200.id}",
        "${http_assertion_body.json-response-body-equals.id}",
    ]

    variables = [
        "${http_variable.field_id.id}",
    ]
}

resource "http_step" "multistep2" {
    method = "GET"
    url = "http://localhost:12345/resource/${var.field_id}"

    assertions = [
        "${http_assertion_status_code.equals_200.id}",
    ]
}

resource "http_test" "test-json-field-passthrough" {
    steps = [
        "${http_step.multistep1.id}",
        "${http_step.multistep2.id}",
    ]
}
